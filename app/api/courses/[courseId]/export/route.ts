import { NextRequest, NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth"
import { supabaseAdmin } from "@/lib/supabase"
import { getLMSCredentials, createLMSService } from "@/lib/lms"

interface CourseExportData {
  name: string
  description: string
  startDate?: Date
  endDate?: Date
  units: Array<{
    id: string
    name: string
    description: string
    position: number
  }>
}

// POST endpoint to export course to LMS
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ courseId: string }> }
) {
  try {
    // Await params in Next.js 15
    const { courseId } = await params
    
    // Verify user session
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { lmsType } = await request.json()

    if (!lmsType || !['canvas', 'moodle'].includes(lmsType)) {
      return NextResponse.json({ error: 'Invalid LMS type' }, { status: 400 })
    }

    // Get course and verify ownership
    const { data: course, error: courseError } = await supabaseAdmin
      .from('Course')
      .select('*')
      .eq('id', courseId)
      .single()

    if (courseError || !course) {
      return NextResponse.json({ error: 'Course not found' }, { status: 404 })
    }

    if (course.userId !== session.user.id) {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 })
    }

    // Get units for the course
    const { data: units, error: unitsError } = await supabaseAdmin
      .from('Unit')
      .select('*')
      .eq('courseId', courseId)
      .order('week', { ascending: true })

    if (unitsError) {
      console.error("Error fetching units:", unitsError)
      return NextResponse.json({ error: 'Failed to fetch course units' }, { status: 500 })
    }

    // Check if already exported to this LMS (for update vs create logic)
    const existingLMSId = lmsType === 'canvas' ? course.canvasCourseId : course.moodleCourseId
    const isUpdate = !!existingLMSId

    // Get LMS credentials for user
    const credentials = await getLMSCredentials(session.user.id, lmsType)
    if (!credentials) {
      return NextResponse.json({ 
        error: `No ${lmsType} connection found. Please connect your ${lmsType} account first.` 
      }, { status: 400 })
    }

    // Create LMS service instance
    const lmsService = createLMSService(credentials)

    // Test connection first
    const connectionTest = await lmsService.testConnection()
    if (!connectionTest.success) {
      return NextResponse.json({ 
        error: `Failed to connect to ${lmsType}: ${connectionTest.error}` 
      }, { status: 400 })
    }

    // Prepare course data for export
    const courseData: CourseExportData = {
      name: course.title,
      description: `${course.subject} - ${course.level}\n\nGenerated by Uncover Learning`,
      startDate: course.startDate ? new Date(course.startDate) : undefined,
      endDate: course.endDate ? new Date(course.endDate) : undefined,
      units: (units || []).map((unit: any, index: number) => ({
        id: unit.id,
        name: unit.title,
        description: unit.description || `Week ${unit.week} - ${unit.type}`,
        position: index + 1
      }))
    }

    let lmsCourse: any
    let modulesResult: any

    if (isUpdate && existingLMSId) {
      // Update existing course
      console.log(`Updating existing ${lmsType} course:`, existingLMSId)
      
      // For updates, we use the existing course ID and update sections/modules
      lmsCourse = { id: existingLMSId, name: courseData.name }
      
      // Update modules/sections for units
      modulesResult = await lmsService.createModulesForCourse(existingLMSId, courseData.units)
      if (!modulesResult.success) {
        console.warn(`Failed to update modules in ${lmsType}:`, modulesResult.error)
      }
    } else {
      // Create new course in LMS
      const courseResult = await lmsService.createCourse(courseData)
      if (!courseResult.success) {
        return NextResponse.json({ 
          error: `Failed to create course in ${lmsType}: ${courseResult.error}` 
        }, { status: 500 })
      }

      lmsCourse = courseResult.data!
      console.log(`Created ${lmsType} course:`, lmsCourse.id)

      // Create modules/sections for units
      modulesResult = await lmsService.createModulesForCourse(lmsCourse.id, courseData.units)
      if (!modulesResult.success) {
        console.warn(`Failed to create modules in ${lmsType}:`, modulesResult.error)
        // Don't fail the whole export if modules fail - course was created successfully
      }

      // Store LMS course ID in database for new courses
      const updateData = lmsType === 'canvas' 
        ? { canvasCourseId: lmsCourse.id }
        : { moodleCourseId: lmsCourse.id }

      await supabaseAdmin
        .from('Course')
        .update(updateData)
        .eq('id', courseId)
    }

    // Return success response
    return NextResponse.json({
      success: true,
      message: `Course successfully ${isUpdate ? 'updated in' : 'exported to'} ${lmsType}`,
      lmsCourse: {
        id: lmsCourse.id,
        name: lmsCourse.name,
        lmsType,
        modulesCreated: modulesResult.success ? modulesResult.data?.length : 0,
        isUpdate
      }
    })

  } catch (error) {
    console.error('Course export error:', error)
    return NextResponse.json({ 
      error: 'Internal server error during export' 
    }, { status: 500 })
  }
}

// GET endpoint to check export status
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ courseId: string }> }
) {
  try {
    // Await params in Next.js 15
    const { courseId } = await params
    
    // Verify user session
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get course and verify ownership
    const { data: course, error: courseError } = await supabaseAdmin
      .from('Course')
      .select('id, userId, title, canvasCourseId, moodleCourseId')
      .eq('id', courseId)
      .single()

    if (courseError || !course) {
      return NextResponse.json({ error: 'Course not found' }, { status: 404 })
    }

    if (course.userId !== session.user.id) {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 })
    }

    // Check user's LMS connections
    const hasCanvas = await getLMSCredentials(session.user.id, 'canvas')
    const hasMoodle = await getLMSCredentials(session.user.id, 'moodle')

    return NextResponse.json({
      course: {
        id: course.id,
        title: course.title,
        exported: {
          canvas: course.canvasCourseId ? {
            lmsCourseId: course.canvasCourseId,
            exported: true
          } : { exported: false },
          moodle: course.moodleCourseId ? {
            lmsCourseId: course.moodleCourseId,
            exported: true
          } : { exported: false }
        }
      },
      connections: {
        canvas: !!hasCanvas,
        moodle: !!hasMoodle
      }
    })

  } catch (error) {
    console.error('Export status check error:', error)
    return NextResponse.json({ 
      error: 'Internal server error' 
    }, { status: 500 })
  }
} 