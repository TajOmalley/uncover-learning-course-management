// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")  // Add back the role field that exists in DB
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Canvas OAuth fields (encrypted)
  canvasAccessToken    String?
  canvasRefreshToken   String?
  canvasTokenExpiresAt DateTime?
  
  // Moodle OAuth fields (encrypted)
  moodleAccessToken    String?
  moodleRefreshToken   String?
  moodleTokenExpiresAt DateTime?
  
  courses Course[]
  generatedContent GeneratedContent[]
  uploadedFiles UploadedFile[]
}

model Course {
  id              String   @id @default(uuid())
  title           String
  subject         String
  level           String
  startDate       String
  endDate         String
  lectureSchedule String   // JSON string
  numberOfUnits   Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // LMS Integration fields
  canvasCourseId  String?  // Store Canvas course ID after export
  moodleCourseId  String?  // Store Moodle course ID after export
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  units Unit[]
  generatedContent GeneratedContent[]
  uploadedFiles UploadedFile[]
}

model Unit {
  id          String   @id @default(uuid())
  title       String
  week        Int
  type        String
  color       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  generatedContent GeneratedContent[]
}

model GeneratedContent {
  id        String   @id @default(uuid())
  type      String   // "reading", "homework", "lesson-plan", "exam"
  content   String   // JSON string
  storageFilename String? // Google Cloud Storage filename (may not exist in current DB)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  unitId String?
  unit   Unit?  @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model UploadedFile {
  id          String   @id @default(uuid())
  originalName String  // Original filename
  storagePath String   // Google Cloud Storage path
  fileType    String   // "syllabus", "lecture slides", etc.
  mimeType    String   // MIME type of the file
  fileSize    Int      // File size in bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}
